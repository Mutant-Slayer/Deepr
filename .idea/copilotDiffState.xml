<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/MainActivity.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.consumeWindowInsets&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.imePadding&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.MoreVert&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.yogeshpaliyal.deepr.ui.components.CreateShortcutDialog&#10;import com.yogeshpaliyal.deepr.ui.theme.DeeprTheme&#10;import com.yogeshpaliyal.deepr.util.createShortcut&#10;import com.yogeshpaliyal.deepr.util.isValidDeeplink&#10;import com.yogeshpaliyal.deepr.util.openDeeplink&#10;import com.yogeshpaliyal.deepr.viewmodel.AccountViewModel&#10;import java.text.DateFormat&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.TimeZone&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val viewModel: AccountViewModel by viewModel()&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            DeeprTheme {&#10;                var isSearchActive by remember { mutableStateOf(false) }&#10;                var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;                Scaffold(modifier = Modifier.fillMaxSize(), topBar = {&#10;                    TopAppBar(&#10;                        title = {&#10;                            if (isSearchActive) {&#10;                                OutlinedTextField(&#10;                                    value = searchQuery,&#10;                                    onValueChange = {&#10;                                        searchQuery = it&#10;                                        viewModel.search(it)&#10;                                    },&#10;                                    placeholder = { Text(&quot;Search...&quot;) },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                            } else {&#10;                                Text(&quot;Deepr&quot;)&#10;                            }&#10;                        },&#10;                        actions = {&#10;                            if (isSearchActive) {&#10;                                IconButton(onClick = {&#10;                                    isSearchActive = false&#10;                                    searchQuery = &quot;&quot;&#10;                                    viewModel.search(&quot;&quot;)&#10;                                }) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Close search&quot;)&#10;                                }&#10;                            } else {&#10;                                IconButton(onClick = { isSearchActive = true }) {&#10;                                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;                }) { innerPadding -&gt;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .padding(innerPadding)&#10;                            .consumeWindowInsets(innerPadding)&#10;                            .imePadding()&#10;                    ) {&#10;                        Content(viewModel)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Content(viewModel: AccountViewModel) {&#10;    val accounts by viewModel.accounts.collectAsState()&#10;    Column {&#10;        val inputText = remember { mutableStateOf(&quot;&quot;) }&#10;        var isError by remember { mutableStateOf(false) }&#10;        val context = LocalContext.current&#10;        var showShortcutDialog by remember { mutableStateOf&lt;Deepr?&gt;(null) }&#10;&#10;        showShortcutDialog?.let { deepr -&gt;&#10;            CreateShortcutDialog(&#10;                deepr = deepr,&#10;                onDismiss = { showShortcutDialog = null },&#10;                onCreate = { d, name -&gt;&#10;                    createShortcut(context, d, name)&#10;                    showShortcutDialog = null&#10;                }&#10;            )&#10;        }&#10;&#10;        DeeprList(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .padding(8.dp),&#10;            accounts = accounts,&#10;            onItemClick = {&#10;                openDeeplink(context, it.link)&#10;            },&#10;            onRemoveClick = {&#10;                viewModel.deleteAccount(it.id)&#10;                Toast.makeText(context, &quot;Deleted&quot;, Toast.LENGTH_SHORT).show()&#10;            },&#10;            onShortcutClick = {&#10;                showShortcutDialog = it&#10;            }&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp),&#10;            elevation = CardDefaults.cardElevation(&#10;                defaultElevation = 12.dp&#10;            )&#10;        ) {&#10;            Column(modifier = Modifier.padding(8.dp)) {&#10;                TextField(&#10;                    value = inputText.value,&#10;                    onValueChange = {&#10;                        inputText.value = it&#10;                        isError = false&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 8.dp),&#10;                    placeholder = { Text(&quot;Enter deeplink or command&quot;) },&#10;                    isError = isError,&#10;                    supportingText = {&#10;                        if (isError) {&#10;                            Text(text = &quot;Invalid or empty deeplink.&quot;)&#10;                        }&#10;                    }&#10;                )&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceAround&#10;                ) {&#10;                    OutlinedButton(onClick = {&#10;                        if (isValidDeeplink(inputText.value)) {&#10;                            viewModel.insertAccount(inputText.value)&#10;                            Toast.makeText(context, &quot;Saved&quot;, Toast.LENGTH_SHORT)&#10;                                .show()&#10;                            inputText.value = &quot;&quot;&#10;                        } else {&#10;                            isError = true&#10;                        }&#10;                    }) {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                    OutlinedButton(onClick = {&#10;                        isError = !openDeeplink(context, inputText.value)&#10;                    }) {&#10;                        Text(&quot;Execute&quot;)&#10;                    }&#10;                    Button(onClick = {&#10;                        if (isValidDeeplink(inputText.value)) {&#10;                            val success = openDeeplink(context, inputText.value)&#10;                            if (success) {&#10;                                viewModel.insertAccount(inputText.value)&#10;                                Toast.makeText(&#10;                                    context,&#10;                                    &quot;Saved&quot;,&#10;                                    Toast.LENGTH_SHORT&#10;                                ).show()&#10;                                inputText.value = &quot;&quot;&#10;                            }&#10;                            isError = !success&#10;                        } else {&#10;                            isError = true&#10;                        }&#10;                    }) {&#10;                        Text(&quot;Save &amp; Execute&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DeeprList(&#10;    modifier: Modifier = Modifier,&#10;    accounts: List&lt;Deepr&gt;,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit,&#10;    onShortcutClick: (Deepr) -&gt; Unit&#10;) {&#10;    LazyColumn(modifier = modifier, contentPadding = PaddingValues(vertical = 8.dp)) {&#10;        if (accounts.isEmpty()) {&#10;            item {&#10;                Text(text = &quot;No deeplinks found.&quot;)&#10;            }&#10;        } else {&#10;            items(accounts) { account -&gt;&#10;                DeeprItem(&#10;                    account = account,&#10;                    onItemClick = onItemClick,&#10;                    onRemoveClick = onRemoveClick,&#10;                    onShortcutClick = onShortcutClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DeeprItem(&#10;    modifier: Modifier = Modifier,&#10;    account: Deepr,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit,&#10;    onShortcutClick: (Deepr) -&gt; Unit&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onItemClick(account) }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(horizontal = 16.dp, vertical = 8.dp)&#10;                .fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f).padding(end = 8.dp)) {&#10;                Text(&#10;                    text = account.link,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = formatDateTime(account.createdAt),&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            Box {&#10;                IconButton(onClick = { expanded = true }) {&#10;                    Icon(Icons.Default.MoreVert, contentDescription = &quot;More options&quot;)&#10;                }&#10;&#10;                DropdownMenu(&#10;                    expanded = expanded,&#10;                    onDismissRequest = { expanded = false }&#10;                ) {&#10;                    DropdownMenuItem(&#10;                        text = { Text(&quot;Add shortcut&quot;) },&#10;                        onClick = {&#10;                            onShortcutClick(account)&#10;                            expanded = false&#10;                        },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                Icons.Default.Add,&#10;                                contentDescription = &quot;Add shortcut&quot;&#10;                            )&#10;                        }&#10;                    )&#10;                    DropdownMenuItem(&#10;                        text = { Text(&quot;Delete&quot;) },&#10;                        onClick = {&#10;                            onRemoveClick(account)&#10;                            expanded = false&#10;                        },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                Icons.Default.Delete,&#10;                                contentDescription = &quot;Delete&quot;&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    DeeprTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}&#10;&#10;private fun formatDateTime(dateTimeString: String): String {&#10;    return try {&#10;        val dbFormatter = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        dbFormatter.timeZone = TimeZone.getTimeZone(&quot;UTC&quot;)&#10;        val date = dbFormatter.parse(dateTimeString)&#10;        val displayFormatter =&#10;            DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, Locale.getDefault())&#10;        date?.let { displayFormatter.format(it) } ?: dateTimeString&#10;    } catch (e: Exception) {&#10;        dateTimeString // fallback to raw string&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.consumeWindowInsets&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.imePadding&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.MoreVert&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.DropdownMenu&#10;import androidx.compose.material3.DropdownMenuItem&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.yogeshpaliyal.deepr.ui.components.CreateShortcutDialog&#10;import com.yogeshpaliyal.deepr.ui.theme.DeeprTheme&#10;import com.yogeshpaliyal.deepr.util.createShortcut&#10;import com.yogeshpaliyal.deepr.util.isValidDeeplink&#10;import com.yogeshpaliyal.deepr.util.openDeeplink&#10;import com.yogeshpaliyal.deepr.viewmodel.AccountViewModel&#10;import com.yogeshpaliyal.deepr.viewmodel.SortOrder&#10;import java.text.DateFormat&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.TimeZone&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val viewModel: AccountViewModel by viewModel()&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            DeeprTheme {&#10;                var isSearchActive by remember { mutableStateOf(false) }&#10;                var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;                Scaffold(modifier = Modifier.fillMaxSize(), topBar = {&#10;                    TopAppBar(&#10;                        title = {&#10;                            if (isSearchActive) {&#10;                                OutlinedTextField(&#10;                                    value = searchQuery,&#10;                                    onValueChange = {&#10;                                        searchQuery = it&#10;                                        viewModel.search(it)&#10;                                    },&#10;                                    placeholder = { Text(&quot;Search...&quot;) },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                            } else {&#10;                                Text(&quot;Deepr&quot;)&#10;                            }&#10;                        },&#10;                        actions = {&#10;                            if (isSearchActive) {&#10;                                IconButton(onClick = {&#10;                                    isSearchActive = false&#10;                                    searchQuery = &quot;&quot;&#10;                                    viewModel.search(&quot;&quot;)&#10;                                }) {&#10;                                    Icon(Icons.Default.Close, contentDescription = &quot;Close search&quot;)&#10;                                }&#10;                            } else {&#10;                                IconButton(onClick = { isSearchActive = true }) {&#10;                                    Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;)&#10;                                }&#10;                                FilterMenu(onSortOrderChange = {&#10;                                    viewModel.setSortOrder(it)&#10;                                })&#10;                            }&#10;                        }&#10;                    )&#10;                }) { innerPadding -&gt;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .padding(innerPadding)&#10;                            .consumeWindowInsets(innerPadding)&#10;                            .imePadding()&#10;                    ) {&#10;                        Content(viewModel)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FilterMenu(onSortOrderChange: (SortOrder) -&gt; Unit) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;    Box {&#10;        IconButton(onClick = { expanded = true }) {&#10;            Icon(Icons.Default.FilterList, contentDescription = &quot;Filter&quot;)&#10;        }&#10;        DropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Sort by Date Ascending&quot;) },&#10;                onClick = {&#10;                    onSortOrderChange(SortOrder.ASC)&#10;                    expanded = false&#10;                }&#10;            )&#10;            DropdownMenuItem(&#10;                text = { Text(&quot;Sort by Date Descending&quot;) },&#10;                onClick = {&#10;                    onSortOrderChange(SortOrder.DESC)&#10;                    expanded = false&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Content(viewModel: AccountViewModel) {&#10;    val accounts by viewModel.accounts.collectAsState()&#10;    Column {&#10;        val inputText = remember { mutableStateOf(&quot;&quot;) }&#10;        var isError by remember { mutableStateOf(false) }&#10;        val context = LocalContext.current&#10;        var showShortcutDialog by remember { mutableStateOf&lt;Deepr?&gt;(null) }&#10;&#10;        showShortcutDialog?.let { deepr -&gt;&#10;            CreateShortcutDialog(&#10;                deepr = deepr,&#10;                onDismiss = { showShortcutDialog = null },&#10;                onCreate = { d, name -&gt;&#10;                    createShortcut(context, d, name)&#10;                    showShortcutDialog = null&#10;                }&#10;            )&#10;        }&#10;&#10;        DeeprList(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .padding(8.dp),&#10;            accounts = accounts,&#10;            onItemClick = {&#10;                openDeeplink(context, it.link)&#10;            },&#10;            onRemoveClick = {&#10;                viewModel.deleteAccount(it.id)&#10;                Toast.makeText(context, &quot;Deleted&quot;, Toast.LENGTH_SHORT).show()&#10;            },&#10;            onShortcutClick = {&#10;                showShortcutDialog = it&#10;            }&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp),&#10;            elevation = CardDefaults.cardElevation(&#10;                defaultElevation = 12.dp&#10;            )&#10;        ) {&#10;            Column(modifier = Modifier.padding(8.dp)) {&#10;                TextField(&#10;                    value = inputText.value,&#10;                    onValueChange = {&#10;                        inputText.value = it&#10;                        isError = false&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 8.dp),&#10;                    placeholder = { Text(&quot;Enter deeplink or command&quot;) },&#10;                    isError = isError,&#10;                    supportingText = {&#10;                        if (isError) {&#10;                            Text(text = &quot;Invalid or empty deeplink.&quot;)&#10;                        }&#10;                    }&#10;                )&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceAround&#10;                ) {&#10;                    OutlinedButton(onClick = {&#10;                        if (isValidDeeplink(inputText.value)) {&#10;                            viewModel.insertAccount(inputText.value)&#10;                            Toast.makeText(context, &quot;Saved&quot;, Toast.LENGTH_SHORT)&#10;                                .show()&#10;                            inputText.value = &quot;&quot;&#10;                        } else {&#10;                            isError = true&#10;                        }&#10;                    }) {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                    OutlinedButton(onClick = {&#10;                        isError = !openDeeplink(context, inputText.value)&#10;                    }) {&#10;                        Text(&quot;Execute&quot;)&#10;                    }&#10;                    Button(onClick = {&#10;                        if (isValidDeeplink(inputText.value)) {&#10;                            val success = openDeeplink(context, inputText.value)&#10;                            if (success) {&#10;                                viewModel.insertAccount(inputText.value)&#10;                                Toast.makeText(&#10;                                    context,&#10;                                    &quot;Saved&quot;,&#10;                                    Toast.LENGTH_SHORT&#10;                                ).show()&#10;                                inputText.value = &quot;&quot;&#10;                            }&#10;                            isError = !success&#10;                        } else {&#10;                            isError = true&#10;                        }&#10;                    }) {&#10;                        Text(&quot;Save &amp; Execute&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DeeprList(&#10;    modifier: Modifier = Modifier,&#10;    accounts: List&lt;Deepr&gt;,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit,&#10;    onShortcutClick: (Deepr) -&gt; Unit&#10;) {&#10;    LazyColumn(modifier = modifier, contentPadding = PaddingValues(vertical = 8.dp)) {&#10;        if (accounts.isEmpty()) {&#10;            item {&#10;                Text(text = &quot;No deeplinks found.&quot;)&#10;            }&#10;        } else {&#10;            items(accounts) { account -&gt;&#10;                DeeprItem(&#10;                    account = account,&#10;                    onItemClick = onItemClick,&#10;                    onRemoveClick = onRemoveClick,&#10;                    onShortcutClick = onShortcutClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DeeprItem(&#10;    modifier: Modifier = Modifier,&#10;    account: Deepr,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit,&#10;    onShortcutClick: (Deepr) -&gt; Unit&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onItemClick(account) }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(horizontal = 16.dp, vertical = 8.dp)&#10;                .fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f).padding(end = 8.dp)) {&#10;                Text(&#10;                    text = account.link,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = formatDateTime(account.createdAt),&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            Box {&#10;                IconButton(onClick = { expanded = true }) {&#10;                    Icon(Icons.Default.MoreVert, contentDescription = &quot;More options&quot;)&#10;                }&#10;&#10;                DropdownMenu(&#10;                    expanded = expanded,&#10;                    onDismissRequest = { expanded = false }&#10;                ) {&#10;                    DropdownMenuItem(&#10;                        text = { Text(&quot;Add shortcut&quot;) },&#10;                        onClick = {&#10;                            onShortcutClick(account)&#10;                            expanded = false&#10;                        },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                Icons.Default.Add,&#10;                                contentDescription = &quot;Add shortcut&quot;&#10;                            )&#10;                        }&#10;                    )&#10;                    DropdownMenuItem(&#10;                        text = { Text(&quot;Delete&quot;) },&#10;                        onClick = {&#10;                            onRemoveClick(account)&#10;                            expanded = false&#10;                        },&#10;                        leadingIcon = {&#10;                            Icon(&#10;                                Icons.Default.Delete,&#10;                                contentDescription = &quot;Delete&quot;&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    DeeprTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}&#10;&#10;private fun formatDateTime(dateTimeString: String): String {&#10;    return try {&#10;        val dbFormatter = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        dbFormatter.timeZone = TimeZone.getTimeZone(&quot;UTC&quot;)&#10;        val date = dbFormatter.parse(dateTimeString)&#10;        val displayFormatter =&#10;            DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, Locale.getDefault())&#10;        date?.let { displayFormatter.format(it) } ?: dateTimeString&#10;    } catch (e: Exception) {&#10;        dateTimeString // fallback to raw string&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/ui/components/CreateShortcutDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/ui/components/CreateShortcutDialog.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr.ui.components&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import com.yogeshpaliyal.deepr.Deepr&#10;&#10;@Composable&#10;fun CreateShortcutDialog(deepr: Deepr, onDismiss: () -&gt; Unit, onCreate: (Deepr, String) -&gt; Unit) {&#10;    var shortcutName by remember { mutableStateOf(deepr.link) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Create Shortcut&quot;) },&#10;        text = {&#10;            TextField(&#10;                value = shortcutName,&#10;                onValueChange = { shortcutName = it },&#10;                label = { Text(&quot;Shortcut Name&quot;) }&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(onClick = { onCreate(deepr, shortcutName) }) {&#10;                Text(&quot;Create&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            Button(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr.ui.components&#10;&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import com.yogeshpaliyal.deepr.Deepr&#10;&#10;@Composable&#10;fun CreateShortcutDialog(deepr: Deepr, onDismiss: () -&gt; Unit, onCreate: (Deepr, String) -&gt; Unit) {&#10;    var shortcutName by remember { mutableStateOf(&quot;&quot;) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Create Shortcut&quot;) },&#10;        text = {&#10;            TextField(&#10;                value = shortcutName,&#10;                onValueChange = { shortcutName = it },&#10;                label = { Text(&quot;Shortcut Name&quot;) },&#10;                placeholder = { Text(text = deepr.link) }&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = { onCreate(deepr, shortcutName) },&#10;                enabled = shortcutName.isNotBlank()&#10;            ) {&#10;                Text(&quot;Create&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            Button(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/util/ShortcutUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/util/ShortcutUtils.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr.util&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import androidx.core.content.pm.ShortcutInfoCompat&#10;import androidx.core.content.pm.ShortcutManagerCompat&#10;import androidx.core.graphics.drawable.IconCompat&#10;import androidx.core.net.toUri&#10;import com.yogeshpaliyal.deepr.Deepr&#10;import com.yogeshpaliyal.deepr.R&#10;&#10;fun createShortcut(context: Context, deepr: Deepr) {&#10;    if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {&#10;        val shortcutInfo = ShortcutInfoCompat.Builder(context, &quot;deepr_${deepr.id}&quot;)&#10;            .setShortLabel(deepr.link)&#10;            .setLongLabel(deepr.link)&#10;            .setIcon(IconCompat.createWithResource(context, R.mipmap.ic_launcher))&#10;            .setIntent(Intent(Intent.ACTION_VIEW, deepr.link.toUri()).apply {&#10;&#10;            })&#10;            .build()&#10;&#10;        ShortcutManagerCompat.requestPinShortcut(context, shortcutInfo, null)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr.util&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import androidx.core.content.pm.ShortcutInfoCompat&#10;import androidx.core.content.pm.ShortcutManagerCompat&#10;import androidx.core.graphics.drawable.IconCompat&#10;import androidx.core.net.toUri&#10;import com.yogeshpaliyal.deepr.Deepr&#10;import com.yogeshpaliyal.deepr.R&#10;&#10;fun createShortcut(context: Context, deepr: Deepr, shortcutName: String) {&#10;    if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {&#10;        val shortcutInfo = ShortcutInfoCompat.Builder(context, &quot;deepr_${deepr.id}&quot;)&#10;            .setShortLabel(shortcutName)&#10;            .setLongLabel(shortcutName)&#10;            .setIcon(IconCompat.createWithResource(context, R.mipmap.ic_launcher))&#10;            .setIntent(Intent(Intent.ACTION_VIEW, deepr.link.toUri()).apply {&#10;&#10;            })&#10;            .build()&#10;&#10;        ShortcutManagerCompat.requestPinShortcut(context, shortcutInfo, null)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/viewmodel/AccountViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/viewmodel/AccountViewModel.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.cash.sqldelight.coroutines.asFlow&#10;import app.cash.sqldelight.coroutines.mapToList&#10;import com.yogeshpaliyal.deepr.Deepr&#10;import com.yogeshpaliyal.deepr.DeeprQueries&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class AccountViewModel(private val deeprQueries: DeeprQueries) : ViewModel() {&#10;&#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;&#10;    val accounts: StateFlow&lt;List&lt;Deepr&gt;&gt; = searchQuery.flatMapLatest { query -&gt;&#10;        if (query.isBlank()) {&#10;            deeprQueries.listDeepr().asFlow().mapToList(viewModelScope.coroutineContext)&#10;        } else {&#10;            deeprQueries.searchDeepr(query).asFlow().mapToList(viewModelScope.coroutineContext)&#10;        }&#10;    }.stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;&#10;    fun insertAccount(link: String) {&#10;        viewModelScope.launch {&#10;            deeprQueries.insertDeepr(link = link)&#10;        }&#10;    }&#10;&#10;    fun deleteAccount(id: Long) {&#10;        viewModelScope.launch {&#10;            deeprQueries.deleteDeeprById(id)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.cash.sqldelight.coroutines.asFlow&#10;import app.cash.sqldelight.coroutines.mapToList&#10;import com.yogeshpaliyal.deepr.Deepr&#10;import com.yogeshpaliyal.deepr.DeeprQueries&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.combine&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;enum class SortOrder {&#10;    ASC, DESC&#10;}&#10;&#10;class AccountViewModel(private val deeprQueries: DeeprQueries) : ViewModel() {&#10;&#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    private val sortOrder = MutableStateFlow(SortOrder.DESC)&#10;&#10;    val accounts: StateFlow&lt;List&lt;Deepr&gt;&gt; =&#10;        combine(searchQuery, sortOrder) { query, order -&gt;&#10;            Pair(query, order)&#10;        }.flatMapLatest { (query, order) -&gt;&#10;            if (query.isBlank()) {&#10;                when (order) {&#10;                    SortOrder.ASC -&gt; deeprQueries.listDeeprAsc()&#10;                    SortOrder.DESC -&gt; deeprQueries.listDeeprDesc()&#10;                }.asFlow().mapToList(viewModelScope.coroutineContext)&#10;            } else {&#10;                when (order) {&#10;                    SortOrder.ASC -&gt; deeprQueries.searchDeeprAsc(query)&#10;                    SortOrder.DESC -&gt; deeprQueries.searchDeeprDesc(query)&#10;                }.asFlow().mapToList(viewModelScope.coroutineContext)&#10;            }&#10;        }.stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;&#10;    fun setSortOrder(order: SortOrder) {&#10;        sortOrder.value = order&#10;    }&#10;&#10;    fun insertAccount(link: String) {&#10;        viewModelScope.launch {&#10;            deeprQueries.insertDeepr(link = link)&#10;        }&#10;    }&#10;&#10;    fun deleteAccount(id: Long) {&#10;        viewModelScope.launch {&#10;            deeprQueries.deleteDeeprById(id)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/sqldelight/com/yogeshpaliyal/deepr/Deepr.sq">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/sqldelight/com/yogeshpaliyal/deepr/Deepr.sq" />
              <option name="originalContent" value="CREATE TABLE Deepr (&#10;id INTEGER PRIMARY KEY NOT NULL,&#10;link TEXT NOT NULL,&#10;createdAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;insertDeepr:&#10;INSERT INTO Deepr (link) VALUES (?);&#10;&#10;listDeepr:&#10;SELECT * FROM Deepr ORDER BY createdAt DESC;&#10;&#10;getDeeprById:&#10;SELECT * FROM Deepr WHERE id = ?;&#10;&#10;deleteDeeprById:&#10;DELETE FROM Deepr WHERE id = ?;&#10;&#10;searchDeepr:&#10;SELECT * FROM Deepr WHERE link LIKE '%' || ? || '%' ORDER BY createdAt DESC;&#10;" />
              <option name="updatedContent" value="CREATE TABLE Deepr (&#10;id INTEGER PRIMARY KEY NOT NULL,&#10;link TEXT NOT NULL,&#10;createdAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;insertDeepr:&#10;INSERT INTO Deepr (link) VALUES (?);&#10;&#10;listDeeprDesc:&#10;SELECT * FROM Deepr ORDER BY createdAt DESC;&#10;&#10;listDeeprAsc:&#10;SELECT * FROM Deepr ORDER BY createdAt ASC;&#10;&#10;getDeeprById:&#10;SELECT * FROM Deepr WHERE id = ?;&#10;&#10;deleteDeeprById:&#10;DELETE FROM Deepr WHERE id = ?;&#10;&#10;searchDeeprDesc:&#10;SELECT * FROM Deepr WHERE link LIKE '%' || ? || '%' ORDER BY createdAt DESC;&#10;&#10;searchDeeprAsc:&#10;SELECT * FROM Deepr WHERE link LIKE '%' || ? || '%' ORDER BY createdAt ASC;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>