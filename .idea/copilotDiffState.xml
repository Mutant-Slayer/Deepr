<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:name=&quot;.DeeprApplication&quot;&#10;        android:theme=&quot;@style/Theme.Deepr&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&#10;            android:theme=&quot;@style/Theme.Deepr&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:name=&quot;.DeeprApplication&quot;&#10;        android:theme=&quot;@style/Theme.Deepr&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&#10;            android:theme=&quot;@style/Theme.Deepr&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/MainActivity.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.yogeshpaliyal.deepr.ui.theme.DeeprTheme&#10;import com.yogeshpaliyal.deepr.util.isValidDeeplink&#10;import com.yogeshpaliyal.deepr.util.openDeeplink&#10;import com.yogeshpaliyal.deepr.viewmodel.AccountViewModel&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val viewModel: AccountViewModel by viewModel()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            DeeprTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    val accounts by viewModel.accounts.collectAsState()&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .padding(innerPadding)&#10;                            .padding(horizontal = 16.dp)&#10;                    ) {&#10;                        val inputText = remember { mutableStateOf(&quot;&quot;) }&#10;                        var isError by remember { mutableStateOf(false) }&#10;                        val context = LocalContext.current&#10;&#10;                        AccountList(&#10;                            modifier = Modifier.weight(1f),&#10;                            accounts = accounts,&#10;                            onItemClick = {&#10;                                openDeeplink(context, it.link)&#10;                            },&#10;                            onRemoveClick = {&#10;                                viewModel.deleteAccount(it.id)&#10;                            }&#10;                        )&#10;&#10;                        Column(modifier = Modifier.imePadding()) {&#10;                            TextField(&#10;                                value = inputText.value,&#10;                                onValueChange = {&#10;                                    inputText.value = it&#10;                                    isError = false&#10;                                },&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 8.dp),&#10;                                placeholder = { Text(&quot;Enter deeplink or command&quot;) },&#10;                                isError = isError,&#10;                                supportingText = {&#10;                                    if (isError) {&#10;                                        Text(text = &quot;Invalid or empty deeplink.&quot;)&#10;                                    }&#10;                                }&#10;                            )&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(bottom = 16.dp),&#10;                                horizontalArrangement = Arrangement.SpaceAround&#10;                            ) {&#10;                                Button(onClick = {&#10;                                    if (isValidDeeplink(inputText.value)) {&#10;                                        viewModel.insertAccount(inputText.value)&#10;                                    } else {&#10;                                        isError = true&#10;                                    }&#10;                                }) {&#10;                                    Text(&quot;Add to DB&quot;)&#10;                                }&#10;                                Button(onClick = {&#10;                                    isError = !openDeeplink(context, inputText.value)&#10;                                }) {&#10;                                    Text(&quot;Execute&quot;)&#10;                                }&#10;                                Button(onClick = {&#10;                                    if (isValidDeeplink(inputText.value)) {&#10;                                        val success = openDeeplink(context, inputText.value)&#10;                                        if (success) {&#10;                                            viewModel.insertAccount(inputText.value)&#10;                                        }&#10;                                        isError = !success&#10;                                    } else {&#10;                                        isError = true&#10;                                    }&#10;                                }) {&#10;                                    Text(&quot;Execute and Save&quot;)&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AccountList(&#10;    modifier: Modifier = Modifier,&#10;    accounts: List&lt;Deepr&gt;,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit&#10;) {&#10;    LazyColumn(modifier = modifier) {&#10;        if (accounts.isEmpty()) {&#10;            item {&#10;                Text(text = &quot;No deeplinks found.&quot;)&#10;            }&#10;        } else {&#10;            items(accounts) { account -&gt;&#10;                AccountItem(&#10;                    account = account,&#10;                    onItemClick = onItemClick,&#10;                    onRemoveClick = onRemoveClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AccountItem(&#10;    modifier: Modifier = Modifier,&#10;    account: Deepr,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onItemClick(account) }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(8.dp)&#10;                .fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(text = account.link, modifier = Modifier.weight(1f))&#10;            IconButton(onClick = { onRemoveClick(account) }) {&#10;                Icon(Icons.Default.Delete, contentDescription = &quot;Remove&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    DeeprTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.yogeshpaliyal.deepr.ui.theme.DeeprTheme&#10;import com.yogeshpaliyal.deepr.util.isValidDeeplink&#10;import com.yogeshpaliyal.deepr.util.openDeeplink&#10;import com.yogeshpaliyal.deepr.viewmodel.AccountViewModel&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val viewModel: AccountViewModel by viewModel()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            DeeprTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    val accounts by viewModel.accounts.collectAsState()&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .padding(innerPadding)&#10;                            .padding(horizontal = 16.dp)&#10;                            .navigationBarsPadding()&#10;                            .imePadding()&#10;                    ) {&#10;                        val inputText = remember { mutableStateOf(&quot;&quot;) }&#10;                        var isError by remember { mutableStateOf(false) }&#10;                        val context = LocalContext.current&#10;&#10;                        AccountList(&#10;                            modifier = Modifier.weight(1f),&#10;                            accounts = accounts,&#10;                            onItemClick = {&#10;                                openDeeplink(context, it.link)&#10;                            },&#10;                            onRemoveClick = {&#10;                                viewModel.deleteAccount(it.id)&#10;                            }&#10;                        )&#10;&#10;                        TextField(&#10;                            value = inputText.value,&#10;                            onValueChange = {&#10;                                inputText.value = it&#10;                                isError = false&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 8.dp),&#10;                            placeholder = { Text(&quot;Enter deeplink or command&quot;) },&#10;                            isError = isError,&#10;                            supportingText = {&#10;                                if (isError) {&#10;                                    Text(text = &quot;Invalid or empty deeplink.&quot;)&#10;                                }&#10;                            }&#10;                        )&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 16.dp),&#10;                            horizontalArrangement = Arrangement.SpaceAround&#10;                        ) {&#10;                            Button(onClick = {&#10;                                if (isValidDeeplink(inputText.value)) {&#10;                                    viewModel.insertAccount(inputText.value)&#10;                                } else {&#10;                                    isError = true&#10;                                }&#10;                            }) {&#10;                                Text(&quot;Add to DB&quot;)&#10;                            }&#10;                            Button(onClick = {&#10;                                isError = !openDeeplink(context, inputText.value)&#10;                            }) {&#10;                                Text(&quot;Execute&quot;)&#10;                            }&#10;                            Button(onClick = {&#10;                                if (isValidDeeplink(inputText.value)) {&#10;                                    val success = openDeeplink(context, inputText.value)&#10;                                    if (success) {&#10;                                        viewModel.insertAccount(inputText.value)&#10;                                    }&#10;                                    isError = !success&#10;                                } else {&#10;                                    isError = true&#10;                                }&#10;                            }) {&#10;                                Text(&quot;Execute and Save&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AccountList(&#10;    modifier: Modifier = Modifier,&#10;    accounts: List&lt;Deepr&gt;,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit&#10;) {&#10;    LazyColumn(modifier = modifier) {&#10;        if (accounts.isEmpty()) {&#10;            item {&#10;                Text(text = &quot;No deeplinks found.&quot;)&#10;            }&#10;        } else {&#10;            items(accounts) { account -&gt;&#10;                AccountItem(&#10;                    account = account,&#10;                    onItemClick = onItemClick,&#10;                    onRemoveClick = onRemoveClick&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AccountItem(&#10;    modifier: Modifier = Modifier,&#10;    account: Deepr,&#10;    onItemClick: (Deepr) -&gt; Unit,&#10;    onRemoveClick: (Deepr) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp)&#10;            .clickable { onItemClick(account) }&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(8.dp)&#10;                .fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(text = account.link, modifier = Modifier.weight(1f))&#10;            IconButton(onClick = { onRemoveClick(account) }) {&#10;                Icon(Icons.Default.Delete, contentDescription = &quot;Remove&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    DeeprTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/util/Utils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/util/Utils.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr.util&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import androidx.core.net.toUri&#10;&#10;fun openDeeplink(context: Context, link: String): Boolean {&#10;    if (!isValidDeeplink(link)) return false&#10;    return try {&#10;        val intent = Intent(Intent.ACTION_VIEW, link.toUri())&#10;        val chooser = Intent.createChooser(intent, /* title */ null)&#10;        context.startActivity(chooser)&#10;        true&#10;    } catch (e: Exception) {&#10;        e.printStackTrace()&#10;        // Optionally, show a toast or a dialog to the user that the link is invalid&#10;        false&#10;    }&#10;}&#10;&#10;fun isValidDeeplink(link: String): Boolean {&#10;    if (link.isBlank()) return false&#10;    return try {&#10;        val uri = link.toUri()&#10;        uri.scheme != null&#10;    } catch (e: Exception) {&#10;        false&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr.util&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import androidx.core.net.toUri&#10;&#10;fun openDeeplink(context: Context, link: String): Boolean {&#10;    if (!isValidDeeplink(link)) return false&#10;    return try {&#10;        val intent = Intent(Intent.ACTION_VIEW, link.toUri())&#10;        context.startActivity(intent)&#10;        true&#10;    } catch (e: Exception) {&#10;        e.printStackTrace()&#10;        // Optionally, show a toast or a dialog to the user that the link is invalid&#10;        false&#10;    }&#10;}&#10;&#10;fun isValidDeeplink(link: String): Boolean {&#10;    if (link.isBlank()) return false&#10;    return try {&#10;        val uri = link.toUri()&#10;        uri.scheme != null&#10;    } catch (e: Exception) {&#10;        false&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/viewmodel/AccountViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yogeshpaliyal/deepr/viewmodel/AccountViewModel.kt" />
              <option name="originalContent" value="package com.yogeshpaliyal.deepr.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.cash.sqldelight.coroutines.asFlow&#10;import app.cash.sqldelight.coroutines.mapToList&#10;import com.yogeshpaliyal.deepr.Deepr&#10;import com.yogeshpaliyal.deepr.DeeprQueries&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class AccountViewModel(private val deeprQueries: DeeprQueries) : ViewModel() {&#10;&#10;    val accounts: StateFlow&lt;List&lt;Deepr&gt;&gt; =&#10;        deeprQueries.listDeepr().asFlow().mapToList(viewModelScope.coroutineContext)&#10;            .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun insertAccount(link: String) {&#10;        viewModelScope.launch {&#10;            deeprQueries.insertDeepr(link = link)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.yogeshpaliyal.deepr.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import app.cash.sqldelight.coroutines.asFlow&#10;import app.cash.sqldelight.coroutines.mapToList&#10;import com.yogeshpaliyal.deepr.Deepr&#10;import com.yogeshpaliyal.deepr.DeeprQueries&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class AccountViewModel(private val deeprQueries: DeeprQueries) : ViewModel() {&#10;&#10;    val accounts: StateFlow&lt;List&lt;Deepr&gt;&gt; =&#10;        deeprQueries.listDeepr().asFlow().mapToList(viewModelScope.coroutineContext)&#10;            .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun insertAccount(link: String) {&#10;        viewModelScope.launch {&#10;            deeprQueries.insertDeepr(link = link)&#10;        }&#10;    }&#10;&#10;    fun deleteAccount(id: Long) {&#10;        viewModelScope.launch {&#10;            deeprQueries.deleteDeeprById(id)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>